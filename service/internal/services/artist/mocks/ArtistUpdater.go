// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/sedonn/song-library-service/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// ArtistUpdater is an autogenerated mock type for the ArtistUpdater type
type ArtistUpdater struct {
	mock.Mock
}

// UpdateArtist provides a mock function with given fields: ctx, a
func (_m *ArtistUpdater) UpdateArtist(ctx context.Context, a models.Artist) (models.Artist, error) {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArtist")
	}

	var r0 models.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Artist) (models.Artist, error)); ok {
		return rf(ctx, a)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Artist) models.Artist); ok {
		r0 = rf(ctx, a)
	} else {
		r0 = ret.Get(0).(models.Artist)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Artist) error); ok {
		r1 = rf(ctx, a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArtistUpdater creates a new instance of ArtistUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtistUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtistUpdater {
	mock := &ArtistUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
