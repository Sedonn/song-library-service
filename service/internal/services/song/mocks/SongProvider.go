// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/sedonn/song-library-service/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// SongProvider is an autogenerated mock type for the SongProvider type
type SongProvider struct {
	mock.Mock
}

// Song provides a mock function with given fields: ctx, id
func (_m *SongProvider) Song(ctx context.Context, id uint64) (models.Song, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Song")
	}

	var r0 models.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (models.Song, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) models.Song); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Song)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Songs provides a mock function with given fields: ctx, attrs, p
func (_m *SongProvider) Songs(ctx context.Context, attrs models.Song, p models.Pagination) (models.Songs, uint64, error) {
	ret := _m.Called(ctx, attrs, p)

	if len(ret) == 0 {
		panic("no return value specified for Songs")
	}

	var r0 models.Songs
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Song, models.Pagination) (models.Songs, uint64, error)); ok {
		return rf(ctx, attrs, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Song, models.Pagination) models.Songs); ok {
		r0 = rf(ctx, attrs, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Songs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Song, models.Pagination) uint64); ok {
		r1 = rf(ctx, attrs, p)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.Song, models.Pagination) error); ok {
		r2 = rf(ctx, attrs, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewSongProvider creates a new instance of SongProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSongProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *SongProvider {
	mock := &SongProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
