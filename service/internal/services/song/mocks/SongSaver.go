// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/sedonn/song-library-service/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// SongSaver is an autogenerated mock type for the SongSaver type
type SongSaver struct {
	mock.Mock
}

// SaveSong provides a mock function with given fields: ctx, s
func (_m *SongSaver) SaveSong(ctx context.Context, s models.Song) (models.Song, error) {
	ret := _m.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for SaveSong")
	}

	var r0 models.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Song) (models.Song, error)); ok {
		return rf(ctx, s)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Song) models.Song); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(models.Song)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Song) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSongSaver creates a new instance of SongSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSongSaver(t interface {
	mock.TestingT
	Cleanup(func())
}) *SongSaver {
	mock := &SongSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
